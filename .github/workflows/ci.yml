name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: warning

  docker-compose-validation:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate docker-compose.yml
        run: docker compose config

  build-test:
    name: Build Platform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/COUCHDB_PASSWORD=CHANGE_ME/COUCHDB_PASSWORD=test_password_123456789/' .env
          sed -i 's/VNC_PASSWORD=CHANGE_ME/VNC_PASSWORD=test_vnc_password/' .env
          sed -i 's/ENCRYPTION_KEY=CHANGE_ME/ENCRYPTION_KEY=test_encryption_key_12345678/' .env
      
      - name: Pull Docker images
        run: docker compose pull
      
      - name: Build and start services
        run: docker compose up -d --build
      
      - name: Wait for Caddy proxy to be ready
        run: |
          max_wait=45
          elapsed=0
          until curl -sf -k https://localhost/ > /dev/null 2>&1; do
            if [ $elapsed -ge $max_wait ]; then
              echo "❌ Timeout waiting for Caddy after ${max_wait}s"
              docker compose logs caddy
              exit 1
            fi
            echo "⏳ Waiting for Caddy proxy... (${elapsed}s/${max_wait}s)"
            sleep 2
            elapsed=$((elapsed + 2))
          done
          echo "✅ Caddy proxy is ready!"
      
      - name: Wait for CouchDB to be ready
        run: |
          max_wait=60
          elapsed=0
          until curl -sf -k https://localhost/couchdb/_up > /dev/null 2>&1; do
            if [ $elapsed -ge $max_wait ]; then
              echo "❌ Timeout waiting for CouchDB after ${max_wait}s"
              docker compose logs couchdb
              docker compose logs caddy
              docker compose logs gocryptfs
              exit 1
            fi
            echo "⏳ Waiting for CouchDB via proxy... (${elapsed}s/${max_wait}s)"
            sleep 2
            elapsed=$((elapsed + 2))
          done
          echo "✅ CouchDB is ready!"
      
      - name: Initialize CouchDB system databases
        run: |
          echo "📋 Creating CouchDB system databases..."
          curl -sf -k -u "admin:test_password_123456789" -X PUT https://localhost/couchdb/_users
          curl -sf -k -u "admin:test_password_123456789" -X PUT https://localhost/couchdb/_replicator
          echo "✅ System databases created"
      
      - name: Verify CouchDB version
        run: |
          VERSION=$(curl -sk https://localhost/couchdb/ | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
          echo "CouchDB version: $VERSION"
          if [ -z "$VERSION" ]; then
            echo "❌ Failed to get CouchDB version"
            exit 1
          fi
      
      - name: Test authentication
        run: |
          if curl -sf -k -u "admin:test_password_123456789" https://localhost/couchdb/_all_dbs > /dev/null 2>&1; then
            echo "✅ Authentication successful"
          else
            echo "❌ Authentication failed"
            exit 1
          fi
      
      - name: Initialize database
        run: ./scripts/init-db.sh obsidian
      
      - name: Verify database created
        run: |
          if curl -sf -k -u "admin:test_password_123456789" https://localhost/couchdb/obsidian > /dev/null 2>&1; then
            echo "✅ Database 'obsidian' created successfully"
          else
            echo "❌ Database 'obsidian' not found"
            exit 1
          fi
      
      - name: Show container status
        if: always()
        run: docker compose ps
      
      - name: Show CouchDB logs
        if: always()
        run: docker compose logs couchdb
      
      - name: Cleanup
        if: always()
        run: docker compose down -v

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/COUCHDB_PASSWORD=CHANGE_ME/COUCHDB_PASSWORD=test_password_123456789/' .env
          sed -i 's/VNC_PASSWORD=CHANGE_ME/VNC_PASSWORD=test_vnc_password/' .env
          sed -i 's/ENCRYPTION_KEY=CHANGE_ME/ENCRYPTION_KEY=test_encryption_key_12345678/' .env
      
      - name: Start services
        run: docker compose up -d
      
      - name: Wait for Caddy proxy
        run: |
          max_wait=45
          elapsed=0
          until curl -sf -k https://localhost/ > /dev/null 2>&1; do
            if [ $elapsed -ge $max_wait ]; then
              echo "❌ Timeout waiting for Caddy after ${max_wait}s"
              docker compose logs caddy
              exit 1
            fi
            echo "⏳ Waiting for Caddy proxy... (${elapsed}s/${max_wait}s)"
            sleep 2
            elapsed=$((elapsed + 2))
          done
          echo "✅ Caddy proxy is ready!"
      
      - name: Wait for CouchDB
        run: |
          max_wait=60
          elapsed=0
          until curl -sf -k https://localhost/couchdb/_up > /dev/null 2>&1; do
            if [ $elapsed -ge $max_wait ]; then
              echo "❌ Timeout waiting for CouchDB after ${max_wait}s"
              docker compose logs couchdb
              docker compose logs caddy
              docker compose logs gocryptfs
              exit 1
            fi
            echo "⏳ Waiting for CouchDB via proxy... (${elapsed}s/${max_wait}s)"
            sleep 2
            elapsed=$((elapsed + 2))
          done
          echo "✅ CouchDB is ready!"
      
      - name: Initialize CouchDB system databases
        run: |
          echo "Creating CouchDB system databases..."
          curl -sf -k -u "admin:test_password_123456789" -X PUT https://localhost/couchdb/_users
          curl -sf -k -u "admin:test_password_123456789" -X PUT https://localhost/couchdb/_replicator
          echo "System databases created"
      
      - name: Run health checks
        run: ./scripts/health-check.sh
      
      - name: Run integration tests
        run: ./scripts/test.sh
      
      - name: Generate test summary
        if: always()
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Categories:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Encryption (key, permissions, gocryptfs)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TLS/HTTPS (Caddy, certificates, redirects)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ CouchDB (auth, CRUD operations, reverse proxy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Obsidian (container, web interface)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Scripts (backup, restore, health check)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Configuration (docker-compose, file permissions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Tests:** 20" >> $GITHUB_STEP_SUMMARY
      
      - name: Check CouchDB logs
        if: always()
        run: docker compose logs couchdb
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Lint Markdown files
        uses: avto-dev/markdown-lint@v1
        with:
          args: '**/*.md'
          ignore: 'node_modules'
