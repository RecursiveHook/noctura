name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  COUCHDB_PASSWORD: test_password_123456789
  VNC_PASSWORD: test_vnc_password
  ENCRYPTION_KEY: test_encryption_key_12345678

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: './scripts'
          severity: warning

  docker-compose-validation:
    name: Validate Docker Compose
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate docker-compose.yml
        run: docker compose config

  build-test:
    name: Build Platform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Setup environment
        uses: ./.github/actions/setup-env
        with:
          couchdb_password: ${{ env.COUCHDB_PASSWORD }}
          vnc_password: ${{ env.VNC_PASSWORD }}
          encryption_key: ${{ env.ENCRYPTION_KEY }}
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Pull Docker images
        run: docker compose pull
      
      - name: Build and start services
        run: docker compose up -d --build
      
      - name: Wait for services to be healthy
        run: |
          echo "‚è≥ Waiting for all services to pass healthchecks..."
          docker compose up --wait --wait-timeout 90
          echo "‚úÖ All services are healthy!"
      
      - name: Wait for Caddy HTTPS endpoint
        run: |
          echo "‚è≥ Waiting for Caddy HTTPS endpoint to be ready..."
          for i in {1..30}; do
            if curl -sk https://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Caddy HTTPS is ready!"
              exit 0
            fi
            echo "  Attempt $i/30: Waiting..."
            sleep 2
          done
          echo "::error::Caddy HTTPS endpoint not ready after 60 seconds"
          docker compose logs caddy
          exit 1
      
      - name: Verify CouchDB accessibility
        run: |
          echo "üîç Testing CouchDB accessibility..."
          echo "Testing root endpoint:"
          if curl -sk -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/ | jq .; then
            echo "‚úÖ CouchDB root accessible"
          else
            echo "::error::Cannot access CouchDB root"
            exit 1
          fi
      
      - name: Initialize CouchDB system databases
        run: |
          echo "::group::Creating CouchDB system databases"
          echo "üìã Creating CouchDB system databases..."
          
          # Create _users database
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_users; then
            echo "‚úÖ _users database created"
          else
            # Check if it already exists
            if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/_users > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  _users database already exists"
            else
              echo "::error::Failed to create _users database"
              echo "Attempting to get error details:"
              curl -sk -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_users || true
              docker compose logs couchdb
              exit 1
            fi
          fi
          
          # Create _replicator database
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_replicator; then
            echo "‚úÖ _replicator database created"
          else
            # Check if it already exists
            if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/_replicator > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  _replicator database already exists"
            else
              echo "::error::Failed to create _replicator database"
              echo "Attempting to get error details:"
              curl -sk -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_replicator || true
              docker compose logs couchdb
              exit 1
            fi
          fi
          
          echo "‚úÖ System databases initialization complete"
          echo "::endgroup::"
      
      - name: Verify CouchDB version
        run: |
          VERSION=$(curl -sk -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/ | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
          echo "CouchDB version: $VERSION"
          echo "couchdb_version=$VERSION" >> $GITHUB_OUTPUT
          if [ -z "$VERSION" ]; then
            echo "::error::Failed to get CouchDB version"
            exit 1
          fi
        id: version
      
      - name: Test authentication
        run: |
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/_all_dbs > /dev/null 2>&1; then
            echo "‚úÖ Authentication successful"
          else
            echo "::error::CouchDB authentication failed"
            exit 1
          fi
      
      - name: Initialize database
        run: ./scripts/init-db.sh obsidian
      
      - name: Verify database created
        run: |
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/obsidian > /dev/null 2>&1; then
            echo "‚úÖ Database 'obsidian' created successfully"
          else
            echo "::error::Database 'obsidian' not found"
            exit 1
          fi
      
      - name: Generate build summary
        if: always()
        run: |
          echo "## üèóÔ∏è Build Platform Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Status" >> $GITHUB_STEP_SUMMARY
          docker compose ps --format json | jq -r '.[] | "- **\(.Name)**: \(.State)"' >> $GITHUB_STEP_SUMMARY || echo "- Unable to get service status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **CouchDB Version**: ${{ steps.version.outputs.couchdb_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Created**: obsidian" >> $GITHUB_STEP_SUMMARY
      
      - name: Show service logs
        if: failure()
        run: |
          echo "::group::Gocryptfs logs"
          docker compose logs gocryptfs
          echo "::endgroup::"
          echo "::group::CouchDB logs"
          docker compose logs couchdb
          echo "::endgroup::"
      
      - name: Cleanup
        if: always()
        run: docker compose down -v

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        uses: ./.github/actions/setup-env
        with:
          couchdb_password: ${{ env.COUCHDB_PASSWORD }}
          vnc_password: ${{ env.VNC_PASSWORD }}
          encryption_key: ${{ env.ENCRYPTION_KEY }}
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Start services
        run: docker compose up -d
      
      - name: Wait for services to be healthy
        run: |
          echo "‚è≥ Waiting for all services to pass healthchecks..."
          docker compose up --wait --wait-timeout 90
          echo "‚úÖ All services are healthy!"
      
      - name: Wait for Caddy HTTPS endpoint
        run: |
          echo "‚è≥ Waiting for Caddy HTTPS endpoint to be ready..."
          for i in {1..30}; do
            if curl -sk https://localhost/ > /dev/null 2>&1; then
              echo "‚úÖ Caddy HTTPS is ready!"
              exit 0
            fi
            echo "  Attempt $i/30: Waiting..."
            sleep 2
          done
          echo "::error::Caddy HTTPS endpoint not ready after 60 seconds"
          docker compose logs caddy
          exit 1
      
      - name: Initialize CouchDB system databases
        run: |
          echo "Creating CouchDB system databases..."
          
          # Create _users database
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_users; then
            echo "‚úÖ _users database created"
          else
            # Check if it already exists
            if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/_users > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  _users database already exists"
            else
              echo "::error::Failed to create _users database"
              curl -sk -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_users || true
              docker compose logs couchdb
              exit 1
            fi
          fi
          
          # Create _replicator database
          if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_replicator; then
            echo "‚úÖ _replicator database created"
          else
            # Check if it already exists
            if curl -sf -k -u "admin:${COUCHDB_PASSWORD}" https://localhost/couchdb/_replicator > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  _replicator database already exists"
            else
              echo "::error::Failed to create _replicator database"
              curl -sk -u "admin:${COUCHDB_PASSWORD}" -X PUT https://localhost/couchdb/_replicator || true
              docker compose logs couchdb
              exit 1
            fi
          fi
          
          echo "System databases initialization complete"
      
      - name: Run health checks
        id: health
        run: |
          ./scripts/health-check.sh
          echo "health_passed=true" >> $GITHUB_OUTPUT
      
      - name: Run integration tests
        id: tests
        run: |
          ./scripts/test.sh
          echo "tests_passed=true" >> $GITHUB_OUTPUT
      
      - name: Generate test summary
        if: always()
        run: |
          echo "## üß™ Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.health.outputs.health_passed }}" == "true" ]; then
            echo "### ‚úÖ Health Checks Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Health Checks Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.tests.outputs.tests_passed }}" == "true" ]; then
            echo "### ‚úÖ Integration Tests Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Integration Tests Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Test Categories:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Encryption (key, permissions, gocryptfs)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ TLS/HTTPS (Caddy, certificates, redirects)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ CouchDB (auth, CRUD operations, reverse proxy)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Obsidian (container, web interface)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Scripts (backup, restore, health check)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Configuration (docker-compose, file permissions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Tests:** 20" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Status" >> $GITHUB_STEP_SUMMARY
          docker compose ps --format json | jq -r '.[] | "- **\(.Name)**: \(.State)"' >> $GITHUB_STEP_SUMMARY || echo "- Unable to get service status" >> $GITHUB_STEP_SUMMARY
      
      - name: Show service logs
        if: failure()
        run: |
          echo "::group::Gocryptfs logs"
          docker compose logs gocryptfs
          echo "::endgroup::"
          echo "::group::CouchDB logs"
          docker compose logs couchdb
          echo "::endgroup::"
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Lint Markdown files
        uses: avto-dev/markdown-lint@v1
        with:
          args: '**/*.md'
          ignore: 'node_modules'
